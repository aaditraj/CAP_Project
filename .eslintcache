[{"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js":"1","/Users/araj/Desktop/Coding/cap/cap_project/src/App.js":"2","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Login/Login.js":"3","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Dropdown/Dropdown.js":"4","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/TrueFalse/TrueFalse.js":"5","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Report/GeneratePDF.js":"6","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/MultChoice/MultChoice.js":"7","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Report/Statistics.js":"8","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Leaderboard/Leaderboard.js":"9","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/DataFetching/GetData.js":"10","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/FillTheBlank/FillTheBlank.js":"11","/Users/araj/Desktop/Coding/cap/cap_project/src/App-test.js":"12","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Quiz.js":"13","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Feedback/Feedback.js":"14","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Past-Quizzes/Past-Quizzes.js":"15","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Home/Home.js":"16"},{"size":3750,"mtime":1622925043403,"results":"17","hashOfConfig":"18"},{"size":26556,"mtime":1622923999947,"results":"19","hashOfConfig":"18"},{"size":18672,"mtime":1623725081646,"results":"20","hashOfConfig":"18"},{"size":3995,"mtime":1622218835641,"results":"21","hashOfConfig":"18"},{"size":2674,"mtime":1622175122077,"results":"22","hashOfConfig":"18"},{"size":1886,"mtime":1623533145533,"results":"23","hashOfConfig":"18"},{"size":4079,"mtime":1622218443715,"results":"24","hashOfConfig":"18"},{"size":2141,"mtime":1623726016239,"results":"25","hashOfConfig":"18"},{"size":4296,"mtime":1623731458774,"results":"26","hashOfConfig":"18"},{"size":8309,"mtime":1623286370445,"results":"27","hashOfConfig":"18"},{"size":2745,"mtime":1614320195834,"results":"28","hashOfConfig":"18"},{"size":11377,"mtime":1623731464470,"results":"29","hashOfConfig":"18"},{"size":23025,"mtime":1623724008039,"results":"30","hashOfConfig":"18"},{"size":10618,"mtime":1623725093373,"results":"31","hashOfConfig":"18"},{"size":677,"mtime":1623536982514,"results":"32","hashOfConfig":"18"},{"size":1707,"mtime":1623645315432,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"1d1tjwl",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"36"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47","usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"55","usedDeprecatedRules":"36"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"36"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"36"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70","usedDeprecatedRules":"36"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"36"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js",[],["76","77"],"/Users/araj/Desktop/Coding/cap/cap_project/src/App.js",[],["78","79"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Login/Login.js",["80","81","82","83","84","85"],"import React from \"react\"\n\n//React Bootstrap components\nimport Form from \"react-bootstrap/Form\"\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\"\nimport Alert from \"react-bootstrap/Alert\"\nimport Image from \"react-bootstrap/Image\"\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\n\nimport fblaLogo from \"/Users/araj/Desktop/Coding/cap/cap_project/src/assets/fbla-logo.png\"\nimport cafblaLogo from \"/Users/araj/Desktop/Coding/cap/cap_project/src/assets/cafbla-logo.png\"\n\n//Styling for login and account creation page\nimport \"./Login.css\"\n\nclass LoginPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.passwordInfo = <Button className=\"password-pop\" size = 'sm' onClick = {this.popPasswordRules}\n        variant = \"link\">Password Rules</Button>\n        this.state = {\n            create : false,\n            login_error: null,\n            password_info : this.passwordInfo,\n            message: null,\n            new_email: null,\n            new_password: null,\n            retype_password: null,\n            login_email: null,\n            login_pw: null,\n            firstName: null,\n            lastName: null\n        }\n    }\n\n    //detecting if there is login error or\n    //account creation error from props passed in App file\n    componentDidUpdate(prevProps){  \n        if (!(prevProps.error)) {\n            if (this.props.error){\n                this.setState({\n                    login_error: <Alert variant = \"danger\" dismissible\n                    onClose = {() => this.setState({login_error: null})}>Invalid Login</Alert>\n                })\n                this.forceUpdate()\n            }\n        } if (!(prevProps.create_error)) {\n            if (this.props.create_error){\n                this.setState({\n                    message: this.CreateAlert(this.props.create_error_message \n                        + \" Redirecting to login page...\")\n                })\n                setTimeout(() => {window.location.reload()}, 3000)\n            }\n        }  \n    }\n\n    handleCreatePasswordChange = (password) => {\n        this.setState({\n            new_password: password,\n        })\n    }\n    \n    //creates a popup displaying password rules when clicking \n    //'Password Rules' link\n    popPasswordRules = () => {\n        this.setState({\n            password_info:  <Alert dismissible \n            onClose = {() => this.setState({password_info : this.passwordInfo})}variant = \"secondary\"\n            >Your password must:\n            <li>Be at least 8 characters long</li>\n            <li>Contain at least 2 uppercase letters</li>\n            <li>Contain at least one special character</li>\n            <li>Contain at least 2 digits</li>\n            <li>Contain at least 3 lowercase letters</li>\n            </Alert>\n        })\n    }\n\n    isFieldEmpty = (field) => {\n        return (field === null || field.replace(/\\s/g, '').length === 0)\n    }\n\n    CreateAlert = (message) => {\n        return <Alert variant=\"danger\" dismissible \n        onClose = {() => this.setState({\n            message: null\n        })}>{message}</Alert>\n    }\n\n    //checks if fields are empty, password mismatch,\n    //password rules violation, and invalid email using regex\n    handleCreate = (firstName, lastName, email, password, retype) => {\n        if (this.isFieldEmpty(firstName) || this.isFieldEmpty(lastName) || this.isFieldEmpty(email) \n            || this.isFieldEmpty(password)){\n            this.setState({\n                message: this.CreateAlert(\"All fields are required\")\n            })\n        } else if (password !== retype){\n            this.setState({\n                message: this.CreateAlert(\"Passwords are not matching\")\n            })\n        } else if (!(password.match(/^.*[A-Z].*[A-Z].*$/))){\n            this.setState({\n                message: this.CreateAlert(\"Password must contain at least 2 uppercase letters\")\n            })\n        } else if (!(password.match(/^.*[!@#$&*].*$/))){\n            this.setState({\n                message: this.CreateAlert(\"Password must contain at least one special character (!, @, #, etc.)\")\n            })\n        } else if (!(password.match(/^.*[0-9].*[0-9].*$/))){\n            this.setState({\n                message: this.CreateAlert(\"Password must contain at least 2 digits\")\n            })\n        } else if (!(password.match(/^.*[a-z].*[a-z].*[a-z].*$/))){\n            this.setState({\n                message: this.CreateAlert(\"Password must contain at least 3 lowercase letters\")\n            })\n        } else if (!(password.match(/^.{8,}$/))){\n            this.setState({\n                message: this.CreateAlert(\"Password must contain at least 8 characters\")\n            })\n        } else if (!(email.match(/^\\S+@\\S+\\.\\S+$/))) {\n            this.setState({\n                message: this.CreateAlert(\"Email is not in proper format\")\n            })\n        }  \n        else {\n            this.setState({\n                message: null\n            })\n            this.props.onCreate(firstName, lastName, email, password)\n        }\n    }\n\n    //if no error, calls the login function from App file\n    handleLogin = (email, password) => {\n        if (this.isFieldEmpty(email) || this.isFieldEmpty(password)){\n            this.setState({\n                login_error: <Alert variant=\"danger\" dismissible \n                onClose = {() => this.setState({login_error: null})}>All fields are required</Alert>\n            })\n        } else {\n            this.props.onLogin(email, password)\n        }\n    }\n\n    //render for two cases: user creates account and user is logging in\n    render() {\n        if (this.state.create){\n            return (\n                <div className = \"home-screen\">\n                    <Jumbotron className = \"jumbo\">\n                        <h1>FBLA Expert</h1>\n                        <h4>Test Your Knowledge About FBLA!</h4>\n                    </Jumbotron>\n                    <div className = \"home-screen-content\">\n                        {/* <Card bg = \"light\" text = \"dark\"> */}\n                        {/* <Card.Header className = \"card-header\"><h2>Login</h2></Card.Header> */}\n                        <Card className = \"create-account-wrapper\" bg=\"light\">\n                            <h2>Create an Account</h2>\n                            <Form className = \"form-login-wrapper\">\n                                 <Form.Group>\n                                     <h6 className = 'login-h6'>First Name</h6>\n                                     <Form.Control onChange = {(e) => \n                                        this.setState({firstName: e.target.value})} \n                                    className = \"create-textbox\" placeholder = \"First Name\"\n                                        autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <h6 className = 'login-h6'>Last Name</h6>\n                                    <Form.Control onChange = {(e) =>\n                                        this.setState({lastName: e.target.value})} \n                                    className = \"create-textbox\" placeholder = \"Last Name\"\n                                        autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <h6 className = 'login-h6'>Email</h6>\n                                    <Form.Control onChange = {(e) => \n                                        this.setState({new_email:  e.target.value})} \n                                    className = \"create-textbox\" placeholder = \"Email\"\n                                    autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <h6 className = 'login-h6'>Password</h6>\n                                    <Form.Control onChange = {(e) =>\n                                        this.handleCreatePasswordChange(e.target.value)}\n                                    className = \"create-textbox\" placeholder = \"Password\"\n                                        type = \"password\" autoComplete = \"off\"\n                                    />\n                                    <h5 className = \"password-info\">{this.state.password_info}</h5>\n                                </Form.Group>\n                                <Form.Group>\n                                    <h6 className = 'login-h6'>Retype Password</h6>\n                                    <Form.Control onChange = {(e) =>\n                                        this.setState({retype_password: e.target.value})}\n                                    className = \"create-textbox\" placeholder = \"Password\"\n                                        type = \"password\" autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <h5 className = \"error-message\">{this.state.message}</h5>\n                                <div>\n                                <Button onClick = {() =>\n                                this.handleCreate(this.state.firstName, this.state.lastName, this.state.new_email, \n                                this.state.new_password, this.state.retype_password)}\n                                className = \"done\">Done</Button>\n                                <Button onClick = {() => this.setState({create: false})}>Back</Button>\n                                </div>\n                            </Form>\n                        </Card>\n                    </div>\n                    <footer>\n                        <Card className=\"app-footer login-footer create-footer\">\n                            <Card.Header><h4>Learn More About FBLA</h4></Card.Header>\n                            <Card.Body className=\"card-body\">\n                            <div id=\"fbla-links\">\n                            <a target=\"_blank\" href=\"https://www.fbla-pbl.org/about/\">\n                                <Image src={fblaLogo}/>\n                            </a>\n                            <a target=\"_blank\" href=\"https://www.cafbla.org/domain/10\">\n                                <Image src={cafblaLogo}/>\n                            </a>\n                            <a target=\"_blank\" href=\"https://www.hhsfbla.com\">\n                                <Image src=\"https://pbs.twimg.com/profile_images/634932700990668800/J4KrGcmG_400x400.jpg\"/>\n                            </a>\n                            </div>\n                            </Card.Body>\n                            <Card.Footer>© 2021 - Aaditya Raj</Card.Footer>\n                        </Card>\n                    </footer>\n                    \n                </div>\n                // <div className = \"home-screen\">\n                //     <Jumbotron className = \"jumbo\">\n                //         <h1>FBLA Expert!</h1>\n                //         <h4>Test Your Knowledge About FBLA!</h4>\n                //     </Jumbotron>\n                //     <Card bg = \"light\" text = \"dark\">\n                //         <Card.Header className = \"card-header\"><h2>Create Account</h2></Card.Header>\n                //         <Card.Body className = \"login-wrapper\">\n                //             <Form>\n                //                 <Form.Group>\n                //                     <h6 className = 'login-h6'>First Name</h6>\n                //                     <Form.Control onChange = {(e) => \n                //                         this.setState({firstName: e.target.value})} \n                //                     className = \"create-textbox\" placeholder = \"First Name\"\n                //                         autoComplete = \"off\"\n                //                     />\n                //                 </Form.Group>\n                //                 <Form.Group>\n                //                     <h6 className = 'login-h6'>Last Name</h6>\n                //                     <Form.Control onChange = {(e) =>\n                //                         this.setState({lastName: e.target.value})} \n                //                     className = \"create-textbox\" placeholder = \"Last Name\"\n                //                         autoComplete = \"off\"\n                //                     />\n                //                 </Form.Group>\n                //                 <Form.Group>\n                //                     <h6 className = 'login-h6'>Email</h6>\n                //                     <Form.Control onChange = {(e) => \n                //                         this.setState({new_email:  e.target.value})} \n                //                     className = \"create-textbox\" placeholder = \"Email\"\n                //                     autoComplete = \"off\"\n                //                     />\n                //                 </Form.Group>\n                //                 <Form.Group>\n                //                     <h6 className = 'login-h6'>Password</h6>\n                //                     <Form.Control onChange = {(e) =>\n                //                         this.handleCreatePasswordChange(e.target.value)}\n                //                     className = \"create-textbox\" placeholder = \"Password\"\n                //                         type = \"password\" autoComplete = \"off\"\n                //                     />\n                //                     <h5 className = \"password-info\">{this.state.password_info}</h5>\n                //                 </Form.Group>\n                //                 <Form.Group>\n                //                     <h6 className = 'login-h6'>Retype Password</h6>\n                //                     <Form.Control onChange = {(e) =>\n                //                         this.setState({retype_password: e.target.value})}\n                //                     className = \"create-textbox\" placeholder = \"Password\"\n                //                         type = \"password\" autoComplete = \"off\"\n                //                     />\n                //                 </Form.Group>\n                //                 <h5 className = \"error-message\">{this.state.message}</h5>\n                //                 <Button onClick = {() =>\n                //                 this.handleCreate(this.state.firstName, this.state.lastName, this.state.new_email, \n                //                 this.state.new_password, this.state.retype_password)}\n                //                 className = \"done\">Done</Button>\n                //                 <Button onClick = {() => this.setState({create: false})}>Back</Button>\n                //             </Form>\n                //         </Card.Body>\n                //     </Card>\n                // </div>\n            )\n        } else{\n            return(\n                <div className = \"home-screen\">\n                    <Jumbotron className = \"jumbo\">\n                        <h1>FBLA Expert!</h1>\n                        <h4>Test Your Knowledge About FBLA!</h4>\n                    </Jumbotron>\n                    <div className = \"home-screen-content\">\n                        <Card className = \"login-wrapper\" bg=\"light\">\n                            <h2>Login</h2>\n                            <Form>\n                                <Form.Group>\n                                    <Form.Control onChange = {(e) =>\n                                        this.setState({login_email: e.target.value})} \n                                    className = \"login-textbox\" placeholder = \"Email\"\n                                        autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <Form.Group>\n                                    <Form.Control onChange = {(e) =>\n                                        this.setState({login_pw: e.target.value})}\n                                    className = \"login-textbox\" placeholder = \"Password\"\n                                        type = \"password\" autoComplete = \"off\"\n                                    />\n                                </Form.Group>\n                                <h5>{this.state.login_error}</h5>\n                                <Button className = \"Login\" onClick = {() => \n                                this.handleLogin(this.state.login_email, this.state.login_pw)}>Login</Button>\n                                <Button className = \"sign-up\" \n                                variant = \"link\" onClick = {() => this.setState({\n                                    create: true\n                                })}>Sign Up</Button>\n                            </Form>\n                        </Card>\n                        {/* <div className = \"About-FBLA\">\n                            <Card.Title className=\"home-title\"><h4>Learn more about FBLA</h4></Card.Title>\n                            <div className = \"FBLA-website\">\n                                <Card.Img src=\"https://logodix.com/logo/1610537.png\"/>\n                                <Button target=\"_blank\" href=\"https://www.fbla-pbl.org/about/\" variant=\"outline-primary\">View Website</Button>\n                            </div>                            \n                        </div> */}\n                    </div>\n                    <footer>\n                        <Card className=\"app-footer login-footer\">\n                            <Card.Header><h4>Learn More About FBLA</h4></Card.Header>\n                            <Card.Body className=\"card-body\">\n                            <div id=\"fbla-links\">\n                            <a target=\"_blank\" href=\"https://www.fbla-pbl.org/about/\">\n                                <Image src={fblaLogo}/>\n                            </a>\n                            <a target=\"_blank\" href=\"https://www.cafbla.org/domain/10\">\n                                <Image src={cafblaLogo}/>\n                            </a>\n                            <a target=\"_blank\" href=\"https://www.hhsfbla.com\">\n                                <Image src=\"https://pbs.twimg.com/profile_images/634932700990668800/J4KrGcmG_400x400.jpg\"/>\n                            </a>\n                            </div>\n                            </Card.Body>\n                            <Card.Footer>© 2021 - Aaditya Raj</Card.Footer>\n                        </Card>\n                    </footer>\n                    \n                </div>\n            )\n        }\n    }\n}\n\nexport default LoginPage;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Dropdown/Dropdown.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/TrueFalse/TrueFalse.js",["86","87"],"import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\"\nimport Button from \"react-bootstrap/Button\"\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\nimport \"./TrueFalse.css\"\nimport checkmark from \"../../../assets/check.svg\"\nimport xmark from \"../../../assets/x.svg\"\nimport { Form } from \"react-bootstrap\";\n\n//Displays true-false dropdown for quiz page and a results display\n\nclass TrueFalse extends React.Component {\n    render() {\n        if (this.props.disabled === 'false'){\n\n            return (\n                // <Dropdown id=\"dropdown-button\" as={ButtonGroup} onSelect = {this.props.onSelect}>\n                //     <Button variant=\"secondary\">{this.props.value}</Button>\n    \n                //     <Dropdown.Toggle split variant=\"secondary\" id=\"dropdown-split-basic\" />\n    \n                //     <Dropdown.Menu>\n                //         <Dropdown.Item eventKey=\"True\">True</Dropdown.Item>\n                //         <Dropdown.Item eventKey=\"False\">False</Dropdown.Item>\n                //     </Dropdown.Menu>\n                // </Dropdown>\n                <Form>\n                    <Form.Group>\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios1`}\n                        label=\"True\"\n                        name=\"formHorizontalRadios\"\n                        onChange = {(e) => this.props.onSelect}\n                        />\n                    </Form.Group>\n                    <Form.Group>\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios1`}\n                        label=\"False\"\n                        name=\"formHorizontalRadios\"\n                        onChange = {(e) => this.props.onSelect}\n                        />\n                    </Form.Group>\n                </Form>\n                    \n                \n            )\n        } else{\n            return(\n                <div className = 'TF-result'>\n                    <Button disabled \n                    className = {this.props.answer ? 'correctTF' : 'incorrectTF'}>\n                    True <img src = {this.props.answer ? checkmark : xmark}\n                        alt = {this.props.answer ? 'checkmark' : 'xmark'}\n                    /></Button>\n                    <Button disabled \n                    className = {this.props.answer ? 'incorrectTF' : 'correctTF'}>\n                    False <img src = {this.props.answer ? xmark : checkmark}\n                    alt = {this.props.answer ? 'xmark' : 'checkmark'}/></Button>\n                </div>\n            )\n        }\n    }\n}\n\nexport default TrueFalse;",["88","89"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Report/GeneratePDF.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/MultChoice/MultChoice.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Report/Statistics.js",["90"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\";\nimport Modal from \"react-bootstrap/Modal\";\nimport Dropdown from \"react-bootstrap/Dropdown\"\n\n//displays statistics from App file when user clicks 'View Statistics'\n//Statistics include average, highest, and lowest scores across all user's attempts\nclass ViewStatistics extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            show: false,\n        }\n    }\n  \n    render(){\n      let controller;\n      let components = [];\n      if (this.props.itemFormat === \"navItem\") {\n        controller = <Button className=\"user-option stats\" variant=\"link\" \n        onClick={() => {this.setState({show: true})}}>Statistics</Button>\n\n      } else {\n        controller = <Button className=\"stats\" variant=\"info\" \n        onClick={() => {this.setState({show: true})}}>Statistics</Button>\n      }\n      \n      if (this.props.attempts === 0){\n        components.push(<h4 className=\"no-quizzes-disclaimer\">No Quizzes Yet!</h4>)\n      } else {\n        components.push(\n          <Modal.Body>\n              <div>\n                  <h5>Highest Score: {this.props.highScore}</h5>\n              </div>\n              <div>\n                  <h5>Lowest Score: {this.props.lowestScore}</h5>\n              </div>\n              <div>\n                  <h5>Average Score: {this.props.average}</h5>\n              </div>\n              <div>\n                  <h5>Attempts: {this.props.attempts}</h5>\n              </div>\n          </Modal.Body>\n        )\n      }\n      return (\n          <>\n            {controller}\n            <Modal show={this.state.show} onHide={() => this.setState({show: false})}>\n              <Modal.Header closeButton>\n                <Modal.Title>Statistics</Modal.Title>\n              </Modal.Header>\n              {components}\n              <Modal.Footer>\n                <Button variant=\"secondary\" onClick={() => {this.setState({show: false})}}>\n                  Close\n                </Button>\n              </Modal.Footer>\n            </Modal>\n          </>\n        );\n    }\n    \n  }\n  \n  export default ViewStatistics;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Leaderboard/Leaderboard.js",["91","92","93"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/DataFetching/GetData.js",["94"],"import firebase from 'firebase';\n\n//this function gets the question data from the database and passes it for display\nexport default async function GetData(props) {  \n    var state = props;\n    var questionData = new Map();\n    var selection = state.selection\n    let firebaseApp= firebase.apps[0];\n    let db = firebaseApp.firestore();\n\n    //pick a random question index from the database for each question type\n    let multChoiceQuestions = db.collection(\"MultipleChoice\").doc(selection).collection(\"Questions\")\n    var snap = await multChoiceQuestions.get()\n    let multChosen = Math.floor(Math.random() * snap.size) + 1\n    let multRef = db.collection(\"MultipleChoice\").doc(selection).collection(\"Questions\").doc(\"\" + multChosen);\n    \n    let multChosen2 = Math.floor(Math.random() * snap.size) + 1\n    while (multChosen2 === multChosen){\n      multChosen2 = Math.floor(Math.random() * snap.size) + 1\n    }\n    let multRef2 = db.collection(\"MultipleChoice\").doc(selection).collection(\"Questions\").doc(\"\" + multChosen2);\n\n\n    let trueFalseQuestions = db.collection(\"TrueFalse\").doc(selection).collection(\"Questions\")\n    var snap = await trueFalseQuestions.get()\n    let trueFalseRef = db.collection(\"TrueFalse\").doc(selection).collection(\"Questions\").doc(\"\" + (Math.floor(Math.random() * snap.size) + 1));\n    \n    let fillBlankQuestions = db.collection(\"FillInTheBlank\").doc(selection).collection(\"Questions\")\n    snap = await fillBlankQuestions.get()\n    let fillBlankRef = db.collection(\"FillInTheBlank\").doc(selection).collection(\"Questions\").doc(\"\" + (Math.floor(Math.random() * snap.size) + 1));\n \n    let dropdownQuestions = db.collection(\"DropDown\").doc(selection).collection(\"Questions\")\n    snap = await dropdownQuestions.get()\n    let dropdownRef = db.collection(\"DropDown\").doc(selection).collection(\"Questions\").doc(\"\" + (Math.floor(Math.random() * snap.size) + 1));\n\n    //wait for the data\n    let [multipleChoice, multipleChoice2, dropdown, trueFalse, fillInTheBlank] = await Promise.all([multRef.get(), multRef2.get(), dropdownRef.get(), trueFalseRef.get(), fillBlankRef.get()])\n\n    //For each question, return the data of the question document for checking against\n    //user's submitted answers later, and return the question and choices for display.\n    if (multipleChoice.exists){ \n      questionData.set('multipleChoice', multipleChoice.data());\n      state.multChoices1 = multipleChoice.data().Choices\n      state.multQuestion1 = multipleChoice.data().Question\n    }\n    if (multipleChoice2.exists){\n      questionData.set('multipleChoice2', multipleChoice2.data());\n      state.multChoices2 = multipleChoice2.data().Choices\n      state.multQuestion2 = multipleChoice2.data().Question\n    }\n    if (dropdown.exists){\n      questionData.set('dropdown', dropdown.data());\n      state.dropdownChoices = dropdown.data().Choices\n      state.dropdownQuestion = dropdown.data().Question\n    }\n    if (trueFalse.exists){\n      questionData.set('trueFalse', trueFalse.data());\n      state.trueFalseQuestion = trueFalse.data().Question\n    }\n    if (fillInTheBlank.exists){\n      questionData.set('fillInTheBlank', fillInTheBlank.data());\n      state.fillBlankQuestion = fillInTheBlank.data().Question\n      state.fetched = true;\n    }\n\n    // var index = 1;\n    // await db.collection(\"DropDown\").get().then((querySnapshot) => {\n      \n    //   querySnapshot.forEach((doc) => {\n    //     if(!isNaN(doc.id)){\n    //       var documentData = doc.data()\n    //       console.log(documentData)\n    //       db.collection(\"DropDown\").doc(\"Potpourri\").collection(\"Questions\").doc(\"\" + index).set({\n    //         Answer: documentData.Answer,\n    //         Question: documentData.Question,\n    //         Choices: documentData.Choices\n    //       })\n    //       index += 1\n    //     }\n        \n    //   })\n\n    // })\n\n    // index = 1\n    // await db.collection(\"FillInTheBlank\").get().then((querySnapshot) => {\n      \n    //   querySnapshot.forEach((doc) => {\n    //     console.log('hi')\n    //     if(!isNaN(doc.id)){\n    //       var documentData = doc.data()\n    //       console.log(documentData)\n    //       db.collection(\"FillInTheBlank\").doc(\"Potpourri\").collection(\"Questions\").doc(\"\" + index).set({\n    //         Answer: documentData.Answer,\n    //         Question: documentData.Question,\n    //       })\n    //       index += 1\n    //     }\n        \n    //   })\n\n    // })\n\n    // index = 1\n    // await db.collection(\"MultipleChoice\").get().then((querySnapshot) => {\n      \n    //   querySnapshot.forEach((doc) => {\n    //     if(!isNaN(doc.id)){\n    //       var documentData = doc.data()\n    //       console.log(documentData)\n    //       db.collection(\"MultipleChoice\").doc(\"Potpourri\").collection(\"Questions\").doc(\"\" + index).set({\n    //         Answer: documentData.Answer,\n    //         Question: documentData.Question,\n    //         Choices: documentData.Choices\n    //       })\n    //       index += 1\n    //     }\n        \n    //   })\n\n    // })\n\n    // index = 1\n    // await db.collection(\"TrueFalse\").get().then((querySnapshot) => {\n      \n    //   querySnapshot.forEach((doc) => {\n    //     if(!isNaN(doc.id)){\n    //       var documentData = doc.data()\n    //       console.log(documentData)\n    //       db.collection(\"TrueFalse\").doc(\"Potpourri\").collection(\"Questions\").doc(\"\" + index).set({\n    //         Answer: documentData.Answer,\n    //         Question: documentData.Question,\n    //       })\n    //       index += 1\n    //     }\n        \n    //   })\n\n    // })\n    // index = 1;\n    // await db.collection(\"DropDown\").where(\"Topic\", \"==\", \"Know Your Numbers\").get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     var documentData = doc.data()\n    //     console.log(documentData)\n    //     db.collection(\"DropDown\").doc(\"Know Your Numbers\").collection(\"Questions\").doc(\"\" + index).set({\n    //       Answer: documentData.Answer,\n    //       Question: documentData.Question,\n    //       Choices: documentData.Choices\n    //     })\n    //     index += 1\n    //   })\n    // })\n\n    // index = 1;\n\n    // await db.collection(\"DropDown\").where(\"Topic\", \"==\", \"People\").get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     var documentData = doc.data()\n    //     console.log(documentData)\n    //     db.collection(\"DropDown\").doc(\"People\").collection(\"Questions\").doc(\"\" + index).set({\n    //       Answer: documentData.Answer,\n    //       Question: documentData.Question,\n    //       Choices: documentData.Choices\n    //     })\n    //     index += 1\n    //   })\n    // })\n    // index = 1;\n\n    // await db.collection(\"DropDown\").where(\"Topic\", \"==\", \"Places\").get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     var documentData = doc.data()\n    //     console.log(documentData)\n    //     db.collection(\"DropDown\").doc(\"Places\").collection(\"Questions\").doc(\"\" + index).set({\n    //       Answer: documentData.Answer,\n    //       Question: documentData.Question,\n    //       Choices: documentData.Choices\n    //     })\n    //     index += 1\n    //   })\n    // })\n    // index = 1;\n\n    // await db.collection(\"DropDown\").where(\"Topic\", \"==\", \"Potpourri\").get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     var documentData = doc.data()\n    //     console.log(documentData)\n    //     db.collection(\"DropDown\").doc(\"Potpourri\").collection(\"Questions\").doc(\"\" + index).set({\n    //       Answer: documentData.Answer,\n    //       Question: documentData.Question,\n    //       Choices: documentData.Choices\n    //     })\n    //     index += 1\n    //   })\n    // })\n    // index = 1;\n\n    // await db.collection(\"DropDown\").where(\"Topic\", \"==\", \"Terms, Creeds, Mottos\").get().then((querySnapshot) => {\n    //   querySnapshot.forEach((doc) => {\n    //     var documentData = doc.data()\n    //     console.log(documentData)\n    //     db.collection(\"DropDown\").doc(\"Terms, Creeds, Mottos\").collection(\"Questions\").doc(\"\" + index).set({\n    //       Answer: documentData.Answer,\n    //       Question: documentData.Question,\n    //       Choices: documentData.Choices\n    //     })\n    //     index += 1\n    //   })\n    // })\n\n    console.log(state, questionData)\n    return (\n      [state, questionData]\n    )\n  }\n\n","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/FillTheBlank/FillTheBlank.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/App-test.js",["95","96","97","98","99","100","101","102","103","104","105","106"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Quiz/Quiz.js",["107","108"],"import React from \"react\";\nimport '/Users/araj/Desktop/Coding/cap/cap_project/src/App.css';\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport 'firebase/firestore';\n\nimport GetData from \"./DataFetching/GetData\"\n\n//styling components from React Bootstrap\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Spinner from \"react-bootstrap/Spinner\"\nimport Alert from \"react-bootstrap/Alert\";\nimport Button from \"react-bootstrap/Button\";\nimport Dropdown from \"react-bootstrap/Dropdown\";\nimport Image from \"react-bootstrap/Image\"\nimport {\n    Link\n  } from \"react-router-dom\";\n\n//Question components (e.g. radio buttons, textboxes) for the questions\nimport DropdownQuestion from \"./Dropdown/Dropdown.js\"\nimport FillInBlank from \"./FillTheBlank/FillTheBlank.js\";\nimport MultChoice from \"./MultChoice/MultChoice.js\";\n// import TrueFalse from \"./components/Quiz/TrueFalse/TrueFalse.js\"\n\n//features for the results page: generating report, and viewing statistics\nimport generatePDF from \"./Report/GeneratePDF.js\"\nimport ViewStatistics from \"./Report/Statistics\"\n\nclass Quiz extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            selection: null,\n            fetched: false,\n            // userDataFetched: false,\n            submitted: false,\n            multChoices1: null,\n            multQuestion1: null,\n            multChoiceState1: null,\n            multChoiceCorrect1: 0,\n            multChoices2: null,\n            multQuestion2: null,\n            multChoiceState2: null,\n            multChoiceCorrect2: 0,\n            dropdownChoices: null,\n            dropdownQuestion: null,\n            dropdownText: 'Choose',\n            dropdownState: null,\n            dropdownCorrect: 0,\n            fillBlankQuestion: null,\n            fillBlankText: '',\n            fillBlankCorrect: 0,\n            fillBlankAnswerState: null,\n            fillBlankError: false,\n            trueFalseQuestion: null,\n            trueFalseState: null,\n            trueFalseCorrect: 0,\n            submissionState: null,\n        }\n    }\n\n\n    async componentDidMount(){\n        // firebase.auth().onAuthStateChanged(async firebaseUser => {\n        //     if (firebaseUser) {\n            this.handleTopicSelect()\n            var firebaseApp = firebase.apps[0]\n            this.db = firebaseApp.firestore()\n            this.allUserData = this.db.collection(\"UserData\")\n            this.readUserRef = this.allUserData.where(\n                \"Email\", \"==\", firebase.auth().currentUser.email)\n            await this.readUserRef.get().then((querySnapshot) => {\n                querySnapshot.forEach((doc) => {\n                this.userData = doc.data();\n                this.writeUserRef = this.allUserData.doc(doc.id)\n                })\n                // this.setState({\n                //     userDataFetched: true\n                // })\n                // this.setState({\n                // logged_in: true,\n                // })\n            //   this.handleNewTake()\n            })\n        //     } else {\n        //     this.setState({\n        //         // logged_in : false,\n        //         // written: false,\n        //         // login_error: false,\n        //         // create_error: false,\n        //         fetched: false,\n        //         submitted: false,\n        //         submissionState: null\n        //     })\n        //     }\n        // })\n    }\n    handleTopicSelect = () => {\n        this.setState({\n            selection: this.props.selected\n        },this.prepareQuiz);\n\n        // this.setState({\n        //     title: event.target.value\n        // }, function() {\n        //     this.validateTitle();\n        //   });\n    }\n\n\n    handleDropdownSelect = (i, e) => {\n        this.setState({\n          dropdownText: e,\n          dropdownState: i\n        })\n    }\n\n    //checking for invalid data entry in fill-in-the-blank textbox\n    //if no error, captures user's entry\n    handleFillBlank = (e) => {\n        if (!(e.target.value.match(/^[A-Za-z]+$/)) && \n        (e.target.value !== '')){\n        this.setState({\n            fillBlankError: true,\n            fillBlankAnswerState: 'Your answer should only include letters (a-z, A-Z).'\n        })\n        } else{\n        this.setState({\n            fillBlankError: false,\n            fillBlankAnswerState: null,\n            fillBlankText: e.target.value\n        })\n        }\n    }\n\n    handleMultChoiceSelect = (i, q, e) => {\n        if (q === 1){\n        this.setState({\n            multChoiceState1: i\n        })\n        }\n        if (q === 2){\n        this.setState({\n            multChoiceState2: i\n        })\n        }\n        if (q === 3){\n        this.setState({\n            trueFalseState: i\n        })\n        }\n    }\n\n    //checks that all questions \n    //are answered with no errors \n    //if no error, compares user's \n    //answer with database and writes \n    //score and new statistics\n    // to the database\n    handleSubmit = async() => {\n        this.score = 0;\n        if (this.state.multChoiceState1 === null \n        || this.state.multChoiceState2 === null\n        || this.state.dropdownState === null\n        || this.state.trueFalseState === null\n        || this.state.fillBlankText === ''\n        || this.state.fillBlankError) {\n            this.setState({\n            submissionState: <Alert variant=\"danger\" dismissible\n            onClose = {() => this.setState({\n                submissionState: null\n            })}>Please attempt all questions and fix any errors.</Alert>\n            })\n        } else{\n        this.setState({\n            multChoiceCorrect1: (this.state.multChoiceState1 === await this.multData.Answer ? 1 : 0),\n        }, async () => {\n            this.setState({\n            multChoiceCorrect2: (this.state.multChoiceState2 === await this.multData2.Answer ? 1 : 0),\n            }, async () => {\n            this.setState({\n                dropdownCorrect: (this.state.dropdownState === await this.dropdownData.Answer ? 1: 0),\n            }, async () => {\n                this.setState({\n                trueFalseCorrect: (Boolean(this.state.trueFalseState) !== await this.truefalseData.Answer ? 1: 0),\n                }, async() => {\n                this.setState({\n                    fillBlankCorrect: (this.state.fillBlankText.toLowerCase() === await this.fillBlankData.Answer ? 1 : 0),\n                    submissionState: <Alert variant=\"info\" >Processing your submission...</Alert>\n                }, async () => {\n                    this.score = this.state.multChoiceCorrect1\n                    + this.state.multChoiceCorrect2 + this.state.dropdownCorrect + \n                    this.state.trueFalseCorrect + this.state.fillBlankCorrect\n                    this.userData.Scores.push(this.score)\n                    this.writeUserRef.update({\n                    Scores: this.userData.Scores,\n                    Highest_Score: Math.max(...this.userData.Scores),\n                    Lowest_Score: Math.min(...this.userData.Scores),\n                    Average:  ((this.userData.Scores.reduce((a, b) => a + b, 0))/(this.userData.Scores.length)).toFixed(2)\n                    }).then(async () => {\n                    this.readUserRef = this.db.collection(\"UserData\").where(\n                        \"Email\", \"==\", firebase.auth().currentUser.email)\n                    await this.readUserRef.get().then((querySnapshot) => {\n                        querySnapshot.forEach((doc) => {\n                        this.userData = doc.data();\n                        })\n                        this.props.onUserDataChange(this.userData)\n                        this.setState({\n                        submitted: true\n                        })\n                        this.allUserData = this.db.collection(\"UserData\")\n                    })\n                    })\n                }) \n                })\n            })\n            })\n        })\n        // this.resultsPDF = generatePDF([\n        //   {\n        //     type: \"Dropdown\",\n        //     question: this.state.dropdownQuestion,\n        //     answer: this.state.dropdownChoices[this.dropdownData.Answer],\n        //     selected: this.state.dropdownChoices[this.state.dropdownState],\n        //     points: this.state.dropdownCorrect\n        //   },\n        //   {\n        //     type: \"Fill In The Blank\",\n        //     question: this.state.fillBlankQuestion,\n        //     answer: this.fillBlankData.Answer,\n        //     selected: this.state.fillBlankText,\n        //     points: this.state.fillBlankCorrect\n        //   },\n        //   {\n        //     type: \"Multiple Choice\",\n        //     question: this.state.multQuestion1,\n        //     answer: this.state.multChoices1[this.multData.Answer],\n        //     selected: this.state.multChoices1[this.state.multChoiceState1],\n        //     points: this.state.multChoiceCorrect1\n        //   },\n        //   {\n        //     type: \"Multiple Choice\",\n        //     question: this.state.multQuestion2,\n        //     answer: this.state.multChoices2[this.multData2.Answer],\n        //     selected: this.state.multChoices2[this.state.multChoiceState2],\n        //     points: this.state.multChoiceCorrect2\n        //   },\n        //   {\n        //     type: \"True or False\",\n        //     question: this.state.trueFalseQuestion,\n        //     answer: this.truefalseData.Answer ? \"True\" : \"False\",\n        //     selected: this.state.trueFalseState,\n        //     points: this.state.trueFalseCorrect\n        //   }\n        // ], this.userData.Name, false)\n        \n        var resultsPDF = this.createPDF(false)\n        console.log(resultsPDF)\n        const date = Date().split(\" \");\n        let dateStr = \"\";\n        for (let i = 0; i <= 4; i++){\n            if (i === 4){\n                dateStr += date[i]\n            }else{\n                dateStr += date[i] + \"-\"\n            }\n        }\n        var metadata = {\n            \"Score\": this.score.toString(),\n            \"Topic\": this.state.selection\n        }\n        var resultsStorageRef = firebase.storage().ref().child(`Results/${firebase.auth().currentUser.email}/results_${dateStr}.pdf`)\n        resultsStorageRef.put(resultsPDF, metadata).then((snapshot) => {\n            console.log('Uploaded a blob or file!');\n        });\n        }\n    }\n\n     //resets question information when user takes new quiz\n  prepareQuiz = async () => {\n    var data = await GetData(this.state)\n    var state = data[0];\n    var questionData = data[1]\n    this.setState({\n      multChoices1: state.multChoices1,\n      multQuestion1: state.multQuestion1,\n      multChoices2: state.multChoices2,\n      multQuestion2: state.multQuestion2,\n      dropdownChoices: state.dropdownChoices,\n      dropdownQuestion: state.dropdownQuestion,\n      trueFalseQuestion: state.trueFalseQuestion,\n      fillBlankQuestion: state.fillBlankQuestion,\n      fetched: state.fetched\n    })\n    this.multData = questionData.get('multipleChoice');\n    this.multData2 = questionData.get('multipleChoice2');\n    this.dropdownData = questionData.get('dropdown');\n    this.truefalseData = questionData.get('trueFalse');\n    this.fillBlankData = questionData.get('fillInTheBlank');\n    if (this.state.fetched === true){\n      this.setState({\n        multChoiceState1: null,\n        multChoiceCorrect1: 0,\n        multChoiceState2: null,\n        multChoiceCorrect2: 0,\n        dropdownText: 'Choose',\n        dropdownState: null,\n        dropdownCorrect: 0,\n        fillBlankCorrect: 0,\n        fillBlankText: '',\n        trueFalseState: null,\n        trueFalseCorrect: 0,\n        submissionState: null,\n        submitted: false,\n        fillBlankError: false,\n        fillBlankAnswerState: null,\n      })\n    }\n  }\n\n  createPDF = (showDialog) => {\n    var pdf = generatePDF([\n        {\n          type: \"Dropdown\",\n          question: this.state.dropdownQuestion,\n          answer: this.state.dropdownChoices[this.dropdownData.Answer],\n          selected: this.state.dropdownChoices[this.state.dropdownState],\n          points: this.state.dropdownCorrect\n        },\n        {\n          type: \"Fill In The Blank\",\n          question: this.state.fillBlankQuestion,\n          answer: this.fillBlankData.Answer,\n          selected: this.state.fillBlankText,\n          points: this.state.fillBlankCorrect\n        },\n        {\n          type: \"Multiple Choice\",\n          question: this.state.multQuestion1,\n          answer: this.state.multChoices1[this.multData.Answer],\n          selected: this.state.multChoices1[this.state.multChoiceState1],\n          points: this.state.multChoiceCorrect1\n        },\n        {\n          type: \"Multiple Choice\",\n          question: this.state.multQuestion2,\n          answer: this.state.multChoices2[this.multData2.Answer],\n          selected: this.state.multChoices2[this.state.multChoiceState2],\n          points: this.state.multChoiceCorrect2\n        },\n        {\n          type: \"True or False\",\n          question: this.state.trueFalseQuestion,\n          answer: this.truefalseData.Answer ? \"True\" : \"False\",\n          selected: this.state.trueFalseState === 0 ? \"True\" : \"False\",\n          points: this.state.trueFalseCorrect\n        }\n      ], this.state.selection, this.userData.Name, showDialog)\n      console.log(pdf)\n      if (!showDialog){\n          return pdf;\n      }\n  }\n\n  render() {\n    \n    // if(!this.state.selection){\n    //     if(this.state.userDataFetched){\n    //         let components = [];\n    //         let topics = [\"Know Your Numbers\", \"Dates and Times\", \"People\", \"Places\", \"Terms, Creeds, Mottos\", \"Potpourri\"]\n    //         for (let index = 0; index < topics.length; index++) {\n    //             components.push(\n    //                 <div className=\"topic-container\">\n    //                     {/* <Image src=\"https://logodix.com/logo/1610537.png\" alt={topics[index]} className=\"topic-image\"/> */}\n    //                     <div className=\"topic-image\" id={topics[index].split(\" \")[0]}>\n    //                     <Button className=\"middle\" onClick = {() => this.handleTopicSelect(topics[index])}>{topics[index]}</Button>\n    //                     </div>\n    //                 </div>\n    //             )   \n    //         }\n    //         return(\n    //             <div>\n    //                 <Jumbotron className = \"jumbo\">\n    //                     <h1>Welcome, {firebase.auth().currentUser.displayName.split(\" \")[0]}</h1>\n    //                     <h4>Choose a Quiz Topic Below!</h4>\n    //                 </Jumbotron>\n    //                 <div id=\"Choose-Topics\">\n\n    //                     <div className=\"topics-wrapper\">\n    //                         {components}\n    //                     </div>\n                        \n\n    //                 </div>\n    //             </div>\n    //         )\n            \n        // } else {\n        //     return(\n        //         <div className = \"loading-screen\">\n        //         <h1>Loading...</h1>\n        //         <Spinner animation=\"border\" variant=\"light\" />\n        //         </div>\n        //     )\n        // }\n        \n\n    // } else {\n    if (this.state.fetched) {\n        //if question data fetched & user has not submitted, render a welcome message\n        //and a div for each question. Question components do not include the actual question\n        if (this.state.submitted === false){\n            return (\n            <div className=\"Quiz\">\n                <header className=\"quiz-header\">\n                    <Jumbotron className = \"jumbo jumbo1\">\n                        <h1>{this.state.selection}</h1>\n                        <h4>Are you an FBLA Expert?</h4>\n                    </Jumbotron>\n                    {/* <Button variant=\"link\"\n                    className=\"go-back\" onClick = {() => this.setState({fetched: false, selection: null})}>Back</Button> */}\n                {/* <Dropdown className = \"logout\">\n                    <Dropdown.Toggle variant=\"outline-primary\">\n                        {this.userData.Name}\n                    </Dropdown.Toggle>\n    \n                    <Dropdown.Menu>\n                        <Dropdown.Item eventKey={'logout'}\n                        onSelect = {this.handleLogout}\n                        key = {'logout'}>Logout\n                        </Dropdown.Item>\n                        <ViewStatistics\n                        menuItem = \"true\" highScore = {this.userData.Highest_Score}\n                        lowestScore = {this.userData.Lowest_Score} average = {this.userData.Average}\n                        attempts = {this.userData.Scores.length}\n                        />\n                        <Leaderboard data = {this.allUserData}/>     \n                    </Dropdown.Menu>\n                </Dropdown> */}\n                {/* <Button variant = \"outline-primary\" onClick = {this.handleLogout}>Logout</Button> */}\n                </header>\n                <div className = \"question dropdown\">\n                <h5>1. {this.state.dropdownQuestion}</h5>\n                <DropdownQuestion onSelect = {this.handleDropdownSelect} value = {this.state.dropdownText}\n                    answerChoices = {this.state.dropdownChoices} disabled = 'false'\n                />\n                </div>\n                <div id = \"fill-blank\" className = \"question\">\n                <h5>2. {this.state.fillBlankQuestion}</h5>\n                <FillInBlank onChange = {this.handleFillBlank} disabled = 'false'/>\n                <div className = 'fillBlankError'>\n                    <h6>{this.state.fillBlankAnswerState}</h6>\n                </div>\n                </div>\n                <div id = \"mult-choice\" className = \"question\">\n                <h5>3. {this.state.multQuestion1}</h5>\n                <MultChoice onSelect = {(i, q) => this.handleMultChoiceSelect(i, q)} disabled = 'false' \n                answerChoices = {this.state.multChoices1} question = '1'/>\n                </div>\n                <div id = \"mult-choice\" className = \"question\">\n                <h5>4. {this.state.multQuestion2}</h5>\n                <MultChoice onSelect = {(i, q) => this.handleMultChoiceSelect(i, q)} disabled = 'false' \n                answerChoices = {this.state.multChoices2} question = '2'/>\n                </div>\n                <div id = \"mult-choice\" className = \"question\">\n                <h5>5. {this.state.trueFalseQuestion}</h5>\n                <MultChoice onSelect = {(i, q) => this.handleMultChoiceSelect(i, q)} disabled = 'false'\n                    answerChoices = {['True', 'False']} question = '3'\n                />\n                {/* <TrueFalse onSelect = {this.handleTrueFalseSelect} disabled = 'false'/> */}\n                </div>\n                <div className = 'submissionError'>\n                <h5>{this.state.submissionState}</h5>\n                </div>\n                <div className = \"submit\">\n                <Button id = \"submit-button\"\n                variant = \"success\" type = \"submit\" \n                onClick = {this.handleSubmit}><strong>Submit</strong></Button>\n                </div>\n            </div>\n        )} else { \n            // if the user has clicked 'submit', displays the results page\n            // with read-only/disabled questions showing the results\n            return (\n            <div className = \"Quiz submission\">\n                <header>\n                <Jumbotron className = \"jumbo\">\n                    <h1>{this.state.selection}</h1>\n                    <h4>Score: {this.score}/5</h4>\n                </Jumbotron>\n                </header>\n                <div className = 'question dropdown'>\n                    <h5><strong>{this.state.dropdownCorrect === 1 ? \"Correct Answer\" : \"Incorrect Answer\"}</strong></h5>\n                    <h6>1. {this.state.dropdownQuestion}</h6>\n                    <DropdownQuestion answerChoices = {this.state.dropdownChoices} disabled = 'true'\n                selected = {this.state.dropdownState} answer = {this.dropdownData.Answer}/>\n                </div>\n                <div className = 'question fill-blank'>\n                <h5><strong>{this.state.fillBlankCorrect === 1 ? \"Correct Answer\" : \"Incorrect Answer\"}</strong></h5>\n                <h6>2. {this.state.fillBlankQuestion}</h6>\n                <FillInBlank disabled = 'true' text = {this.state.fillBlankText} correct = {this.state.fillBlankCorrect}\n                    answer = {this.fillBlankData.Answer}\n                />\n                </div>\n                <div className = 'question mult-choice'>\n                <h5><strong>{this.state.multChoiceCorrect1 === 1 ? \"Correct Answer\" : \"Incorrect Answer\"}</strong> </h5>\n                <h6>3. {this.state.multQuestion1} </h6>\n                <MultChoice answerChoices = {this.state.multChoices1} disabled = 'true' \n                selected = {this.state.multChoiceState1}  answer = {this.multData.Answer}\n                />\n                </div>\n                <div className = 'question mult-choice'>\n                <h5><strong>{this.state.multChoiceCorrect2 === 1 ? \"Correct Answer\" : \"Incorrect Answer\"}</strong> </h5>\n                <h6>4. {this.state.multQuestion2} </h6>\n                <MultChoice answerChoices = {this.state.multChoices2} disabled = 'true' \n                selected = {this.state.multChoiceState2}  answer = {this.multData2.Answer}/>\n                </div>  \n                <div className = 'question trueFalse'>\n                <h5><strong>{this.state.trueFalseCorrect === 1 ? \"Correct Answer\" : \"Incorrect Answer\"}</strong></h5>\n                <h6>5. {this.state.trueFalseQuestion}</h6>\n                {/* <TrueFalse disabled = 'true' answer = {this.truefalseData.Answer}/> */}\n                <MultChoice answerChoices = {['True', 'False']} disabled = 'true' selected = {this.state.trueFalseState}\n                answer = {this.truefalseData.Answer ? 0 : 1}/>\n                </div>\n                <br></br>\n                <div className = \"submission-options\">\n                {/*Three submission options, clicking download report button\n                creates a pdf with the current quiz results, which are passed as a paramater*/}\n                <div className = \"retake\">\n                <Button as={Link} to=\"/\">Take Another Quiz</Button>\n                </div>\n                <div className = \"export\">\n                <Button variant = \"warning\" onClick = {() => this.createPDF(true)}>Download Results</Button>\n                </div>\n                {/*Displays user's quiz score statistics in a popup*/}\n                <ViewStatistics itemFormat = \"button\" highScore = {this.userData.Highest_Score}\n                    lowestScore = {this.userData.Lowest_Score} average = {this.userData.Average}\n                    attempts = {this.userData.Scores.length}/>\n                </div>\n            </div>\n            )\n        }\n        } else {\n        return (\n            <div className = \"loading-screen\">\n            <h1>Loading...</h1>\n            <Spinner animation=\"border\" variant=\"light\" />\n            </div>\n        )\n        }\n    }\n\n}\n\nexport default Quiz;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Feedback/Feedback.js",["109","110"],"import React from \"react\"\nimport firebase from 'firebase';\nimport \"./Feedback.css\"\n\n\n//React Bootstrap components\nimport { Form, Col, Row}  from \"react-bootstrap\"\nimport Button from \"react-bootstrap/Button\"\nimport Card from \"react-bootstrap/Card\"\nimport Alert from \"react-bootstrap/Alert\"\nimport Jumbotron from \"react-bootstrap/Jumbotron\"\n\nclass Feedback extends React.Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            topic: null,\n            question_type: null,\n            question: null,\n            answer: null,\n            choices: [null, null, null, null],\n            question_submission_state: null,\n            validated: false,\n            feedback: null,\n            feedback_submission_state: null\n        }\n    }\n\n   \n\n    handleTopicSelect = (e) => {\n        this.setState({\n            topic: e.target.value\n        })\n    }\n\n    handleTypeSelect = (e) => {\n        this.setState({\n            question_type: e.target.value\n        })\n    }\n\n    handleQuestionChange = (e) => {\n        this.setState({\n            question: e.target.value\n        })\n    }\n\n    handleAnswerChange = (e) => {\n        this.setState({\n            answer: e.target.value\n        })\n    }\n\n    addChoice = (e, i) => {\n        var newChoices = this.state.choices\n        newChoices[i] = e.target.value\n        this.setState({\n            choices: newChoices\n        })\n    }\n\n    handleFeedbackChange = (e) => {\n        this.setState({\n            feedback: e.target.value\n        })\n    }\n\n    sendFeedback = (e) => {\n        const form = e.currentTarget;\n        if (form.checkValidity() === false) {\n            e.preventDefault()\n            e.stopPropagation()\n        }\n        else{\n            console.log(\"sending message!\")\n            var db = firebase.apps[0].firestore()\n            db.collection(\"Feedback\").doc(\"Messages\").collection(\"Messages\").add({\n                Email: firebase.auth().currentUser.email,\n                Message: this.state.feedback\n            })\n            this.setState({\n                feedback_submission_state: <Alert variant=\"success\" dismissible\n                onClose={()=>{this.setState({feedback_submission_state:null})}}>Message sent successfully!</Alert>\n            })\n        }\n        this.setState({message_validated: true})\n        e.preventDefault()\n    }\n\n    sendQuestion = (e) => {\n        const form = e.currentTarget;\n        if (form.checkValidity() === false) {\n            e.preventDefault()\n            e.stopPropagation()\n        }\n        else {\n            console.log(\"sending question!\")\n            var db = firebase.apps[0].firestore()\n            var choices = this.state.choices\n            if (choices[3] === null){\n                db.collection(\"Feedback\").doc(\"Suggestions\").collection(\"Questions\").add({\n                    Topic: this.state.topic,\n                    Type: this.state.question_type,\n                    Question: this.state.question,\n                    Choices: this.state.choices.slice(0, 3),\n                    Answer: this.state.answer\n                })\n            } else {\n                db.collection(\"Feedback\").doc(\"Suggestions\").collection(\"Questions\").add({\n                    Topic: this.state.topic,\n                    Type: this.state.question_type,\n                    Question: this.state.question,\n                    Choices: this.state.choices,\n                    Answer: this.state.answer\n                })\n            }\n            this.setState({\n                question_submission_state: <Alert variant=\"success\" dismissible\n                onClose={()=>{this.setState({question_submission_state:null})}}>Question sent successfully!</Alert>\n            })\n        }\n        this.setState({validated: true})\n        e.preventDefault()\n        \n    }\n\n    render() {\n        let components = []\n        switch(this.state.question_type){\n            case(\"DropDown\"):\n                components = [\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridChoice1\">\n                        <Form.Label>Choice 1</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 0)}}/>\n                        <Form.Control.Feedback type=\"invalid\">Please provide 3 choices</Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridChoice2\">\n                        <Form.Label>Choice 2</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 1)}}/>\n                        </Form.Group>\n                    \n                        <Form.Group as={Col} controlId=\"formGridChoice3\">\n                        <Form.Label>Choice3</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 2)}}/>\n                        </Form.Group>\n                    </Form.Row> \n                ]\n                break;\n            case(\"MultipleChoice\"):\n                components = [\n                    <Form.Row>\n                        <Form.Group as={Col} controlId=\"formGridChoice1\">\n                        <Form.Label>Choice 1</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 0)}}/>\n                        <Form.Control.Feedback type=\"invalid\">Please provide 4 choices</Form.Control.Feedback>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridChoice2\">\n                        <Form.Label>Choice 2</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 1)}}/>\n                        </Form.Group>\n                    \n                        <Form.Group as={Col} controlId=\"formGridChoice3\">\n                        <Form.Label>Choice 3</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 2)}}/>\n                        </Form.Group>\n\n                        <Form.Group as={Col} controlId=\"formGridChoice4\">\n                        <Form.Label>Choice 4</Form.Label>\n                        <Form.Control required onChange={(e) => {this.addChoice(e, 3)}}/>\n                        </Form.Group>\n                    </Form.Row> \n                ]\n                break;\n        }\n        return(\n            <div className = \"feedback-page\">\n                <Jumbotron className = \"jumbo\">\n                    <h1>FBLA Expert</h1>\n                    <h4>Help Us Improve!</h4>\n                </Jumbotron>\n                <div className=\"feedback\">\n                <Card className = \"feedback-input\" bg=\"light\">\n                    <h2>Suggest a Question!</h2>\n                    <Form noValidate validated={this.state.validated} onSubmit={this.sendQuestion}>\n                        <Form.Group>\n                            <Form.Label>Topic</Form.Label>\n                            <Form.Control required as=\"select\" onChange={ (e) => {this.handleTopicSelect(e)} }>\n                                <option value=\"\">Select</option>\n                                <option value=\"Know Your Numbers\">Know Your Numbers</option>\n                                <option value=\"Dates and Times\">Dates and Times</option>\n                                <option value=\"People\">People</option>\n                                <option value=\"Places\">Places</option>\n                                <option value=\"Terms, Creeds, Mottos\">Terms, Creeds, Mottos</option>\n                                <option value=\"Potpourri\">Potpourri</option>\n\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">Please choose a topic.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Question Type</Form.Label>\n                            <Form.Control required as=\"select\" onChange={ (e) => {this.handleTypeSelect(e)} }>\n                                <option value=\"\">Select</option>\n                                <option value=\"DropDown\">Dropdown</option>\n                                <option value=\"FillInTheBlank\">Fill in the Blank</option>\n                                <option value=\"MultipleChoice\">Multiple Choice</option>\n                                <option value=\"TrueFalse\">True/False</option>\n                            </Form.Control>\n                            <Form.Control.Feedback type=\"invalid\">Please choose a question type.</Form.Control.Feedback>\n                        </Form.Group>\n                        <Form.Group>\n                            <Form.Label>Question</Form.Label>\n                            <Form.Control required placeholder=\"Enter question\" onChange={ (e) => {this.handleQuestionChange(e)}}/>\n                            <Form.Control.Feedback type=\"invalid\">Please provide a question.</Form.Control.Feedback>\n                        </Form.Group>\n                        {components}\n                        <Form.Group>\n                            <Form.Label>Answer</Form.Label>\n                            <Form.Control required placeholder=\"Enter answer\" onChange={ (e) => {this.handleAnswerChange(e)} }/>\n                            <Form.Control.Feedback type=\"invalid\">Please provide an answer.</Form.Control.Feedback>\n                        </Form.Group>\n                        {this.state.question_submission_state}\n                        <Button className = \"send-question\" variant=\"success\"\n                        type=\"submit\">Send!</Button>\n                    </Form>\n                </Card>\n                <Card className = \"feedback-input\" bg=\"light\">\n                    <h2>Send Us Feedback!</h2>\n                    <Form noValidate validated={this.state.message_validated} onSubmit={this.sendFeedback}>\n                        <Form.Group>\n                            <Form.Label>Message</Form.Label>\n                            <Form.Control as=\"textarea\" rows={3}\n                            required onChange={ (e) => {this.handleFeedbackChange(e)} }/>\n                            <Form.Control.Feedback type=\"invalid\">Please enter a message.</Form.Control.Feedback>\n                        </Form.Group>\n                        {this.state.feedback_submission_state}\n                        <Button className = \"send-feedback\" variant=\"success\"\n                        type=\"submit\">Send!</Button>\n                    </Form>\n                </Card>\n                \n            </div>\n            </div>\n        )\n    }\n}\n\nexport default Feedback;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Past-Quizzes/Past-Quizzes.js",["111"],"import React from \"react\";\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport 'firebase/firestore';\n\nconst showPastQuizzes = () =>{\n\n        var currentUserEmail = firebase.auth().currentUser.email\n        var storage = firebase.storage()\n        var pathRef = storage.ref().child(`Results/${currentUserEmail}`)\n        pathRef.listAll().then((res) => {\n            res.items.forEach((itemRef) => {\n                console.log(itemRef)\n                itemRef.getMetadata().then((metaData) => {\n                    console.log(metaData.timeCreated, metaData.Score, metaData.Topic)\n                })\n            })\n        })\n}\n\nexport default showPastQuizzes;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Home/Home.js",[],{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":221,"column":32,"nodeType":"120","endLine":221,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":224,"column":32,"nodeType":"120","endLine":224,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":227,"column":32,"nodeType":"120","endLine":227,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":345,"column":32,"nodeType":"120","endLine":345,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":348,"column":32,"nodeType":"120","endLine":348,"endColumn":47},{"ruleId":"118","severity":1,"message":"119","line":351,"column":32,"nodeType":"120","endLine":351,"endColumn":47},{"ruleId":"121","severity":1,"message":"122","line":2,"column":8,"nodeType":"123","messageId":"124","endLine":2,"endColumn":16},{"ruleId":"121","severity":1,"message":"125","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":19},{"ruleId":"112","replacedBy":"126"},{"ruleId":"114","replacedBy":"127"},{"ruleId":"121","severity":1,"message":"122","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"122","line":4,"column":8,"nodeType":"123","messageId":"124","endLine":4,"endColumn":16},{"ruleId":"121","severity":1,"message":"128","line":5,"column":8,"nodeType":"123","messageId":"124","endLine":5,"endColumn":13},{"ruleId":"121","severity":1,"message":"129","line":6,"column":8,"nodeType":"123","messageId":"124","endLine":6,"endColumn":14},{"ruleId":"130","severity":1,"message":"131","line":25,"column":9,"nodeType":"123","messageId":"132","endLine":25,"endColumn":13},{"ruleId":"121","severity":1,"message":"133","line":20,"column":8,"nodeType":"123","messageId":"124","endLine":20,"endColumn":15},{"ruleId":"121","severity":1,"message":"134","line":21,"column":8,"nodeType":"123","messageId":"124","endLine":21,"endColumn":23},{"ruleId":"121","severity":1,"message":"135","line":24,"column":8,"nodeType":"123","messageId":"124","endLine":24,"endColumn":17},{"ruleId":"121","severity":1,"message":"136","line":25,"column":8,"nodeType":"123","messageId":"124","endLine":25,"endColumn":15},{"ruleId":"121","severity":1,"message":"137","line":26,"column":8,"nodeType":"123","messageId":"124","endLine":26,"endColumn":13},{"ruleId":"121","severity":1,"message":"138","line":35,"column":8,"nodeType":"123","messageId":"124","endLine":35,"endColumn":24},{"ruleId":"121","severity":1,"message":"139","line":36,"column":8,"nodeType":"123","messageId":"124","endLine":36,"endColumn":19},{"ruleId":"121","severity":1,"message":"140","line":37,"column":8,"nodeType":"123","messageId":"124","endLine":37,"endColumn":18},{"ruleId":"121","severity":1,"message":"141","line":41,"column":8,"nodeType":"123","messageId":"124","endLine":41,"endColumn":19},{"ruleId":"118","severity":1,"message":"119","line":275,"column":24,"nodeType":"120","endLine":275,"endColumn":39},{"ruleId":"118","severity":1,"message":"119","line":278,"column":24,"nodeType":"120","endLine":278,"endColumn":39},{"ruleId":"118","severity":1,"message":"119","line":281,"column":24,"nodeType":"120","endLine":281,"endColumn":39},{"ruleId":"121","severity":1,"message":"122","line":14,"column":8,"nodeType":"123","messageId":"124","endLine":14,"endColumn":16},{"ruleId":"121","severity":1,"message":"142","line":15,"column":8,"nodeType":"123","messageId":"124","endLine":15,"endColumn":13},{"ruleId":"121","severity":1,"message":"143","line":7,"column":21,"nodeType":"123","messageId":"124","endLine":7,"endColumn":24},{"ruleId":"144","severity":1,"message":"145","line":130,"column":9,"nodeType":"146","messageId":"147","endLine":178,"endColumn":10},{"ruleId":"121","severity":1,"message":"148","line":1,"column":8,"nodeType":"123","messageId":"124","endLine":1,"endColumn":13},"no-native-reassign",["149"],"no-negated-in-lhs",["150"],["149"],["150"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-unused-vars","'Dropdown' is defined but never used.","Identifier","unusedVar","'ButtonGroup' is defined but never used.",["149"],["150"],"'Modal' is defined but never used.","'Button' is defined but never used.","no-redeclare","'snap' is already defined.","redeclared","'GetData' is defined but never used.","'showPastQuizzes' is defined but never used.","'Jumbotron' is defined but never used.","'Spinner' is defined but never used.","'Alert' is defined but never used.","'DropdownQuestion' is defined but never used.","'FillInBlank' is defined but never used.","'MultChoice' is defined but never used.","'generatePDF' is defined but never used.","'Image' is defined but never used.","'Row' is defined but never used.","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","'React' is defined but never used.","no-global-assign","no-unsafe-negation"]