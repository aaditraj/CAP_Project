[{"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js":"1","/Users/araj/Desktop/Coding/cap/cap_project/src/reportWebVitals.js":"2","/Users/araj/Desktop/Coding/cap/cap_project/src/App.js":"3","/Users/araj/Desktop/Coding/cap/cap_project/src/components/InfoDisplay.js":"4","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/Dropdown/Dropdown.js":"5","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/FillTheBlank/FillTheBlank.js":"6","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/MultChoice/MultChoice.js":"7","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/TrueFalse/TrueFalse.js":"8"},{"size":839,"mtime":1611525597241,"results":"9","hashOfConfig":"10"},{"size":362,"mtime":1609036986229,"results":"11","hashOfConfig":"10"},{"size":13130,"mtime":1611286450742,"results":"12","hashOfConfig":"10"},{"size":814,"mtime":1611284022809,"results":"13","hashOfConfig":"10"},{"size":2504,"mtime":1611034597851,"results":"14","hashOfConfig":"10"},{"size":1480,"mtime":1611034695901,"results":"15","hashOfConfig":"10"},{"size":3394,"mtime":1611285061496,"results":"16","hashOfConfig":"10"},{"size":1539,"mtime":1611286987645,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"1d1tjwl",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26","usedDeprecatedRules":"20"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"33"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"20"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"20"},"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js",[],["40","41"],"/Users/araj/Desktop/Coding/cap/cap_project/src/reportWebVitals.js",[],["42","43"],"/Users/araj/Desktop/Coding/cap/cap_project/src/App.js",["44","45"],"import React from \"react\";\nimport Button from \"react-bootstrap/Button\"\nimport './App.css';\nimport firebase from \"firebase/app\";\nimport 'firebase/firestore';\nimport Jumbotron from \"react-bootstrap/Jumbotron\";\nimport Spinner from \"react-bootstrap/Spinner\"\nimport InfoButton from \"./components/InfoDisplay.js\";\nimport DropdownQuestion from \"./components/Questions/Dropdown/Dropdown.js\"\nimport FillInBlank from \"./components/Questions/FillTheBlank/FillTheBlank.js\";\nimport MultChoice from \"./components/Questions/MultChoice/MultChoice.js\";\nimport TrueFalse from \"./components/Questions/TrueFalse/TrueFalse.js\"\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      fetched: false,\n      submitted: false,\n      multChoices1: null,\n      multQuestion1: null,\n      multChoiceState1: null,\n      multChoiceCorrect1: 0,\n      multChoices2: null,\n      multQuestion2: null,\n      multChoiceState2: null,\n      multChoiceCorrect2: 0,\n      dropdownChoices: null,\n      dropdownQuestion: null,\n      dropdownText: 'Choose',\n      dropdownState: null,\n      dropdownCorrect: 0,\n      fillBlankQuestion: null,\n      fillBlankText: '',\n      fillBlankCorrect: 0,\n      fillBlankAnswerState: null,\n      fillBlankError: false,\n      trueFalseQuestion: null,\n      trueFalseText: 'True/False',\n      trueFalseCorrect: 0,\n      submissionState: null,\n    }\n    this.handleDropdownSelect = this.handleDropdownSelect.bind(this)\n    this.handleTrueFalseSelect = this.handleTrueFalseSelect.bind(this)\n    this.handleFillBlank = this.handleFillBlank.bind(this)\n    this.handleMultChoiceSelect = this.handleMultChoiceSelect.bind(this)\n    this.handleSubmit = this.handleSubmit.bind(this)\n    this.handleTake = this.handleTake.bind(this)\n    this.firebaseApp = firebase.apps[0];\n    this.db = this.firebaseApp.firestore();\n    this.multChosen = Math.floor(Math.random() * 20);\n    this.multRef = this.db.collection(\"MultipleChoice\").doc(\"\" + this.multChosen);\n    this.multChosen2 = Math.floor(Math.random() * 20);\n    while (this.multChosen2 === this.multChosen){\n      this.multChosen2 = Math.floor(Math.random() * 20)\n    }\n    this.multRef2 = this.db.collection(\"MultipleChoice\").doc(\"\" + this.multChosen2);\n    this.dropdownRef = this.db.collection(\"DropDown\").doc(\"\" + Math.floor((Math.random() * 10)));\n    this.trueFalseRef = this.db.collection(\"TrueFalse\").doc( \"\" + Math.floor((Math.random() * 10)));\n    this.fillBlankRef = this.db.collection(\"FillInTheBlank\").doc(\"\" + Math.floor((Math.random() * 10)))\n    this.getData();\n  }\n  async getData() {\n    this.setState({\n      fetched: false\n    })\n    await this.multRef.get().then(async (doc) => {\n      if (doc.exists) {\n        this.multData = doc.data()\n        this.setState({\n          multChoices1: doc.data().Choices,\n          multQuestion1: doc.data().Question,\n        }) \n        await this.multRef2.get().then(async (doc) => {\n          if (doc.exists) {\n            this.multData2 = doc.data()\n            this.setState({\n              multChoices2: doc.data().Choices,\n              multQuestion2: doc.data().Question,\n            })\n            await this.dropdownRef.get().then(async (doc) => {\n              if (doc.exists) {\n                this.dropdownData = doc.data()\n                this.setState({\n                  dropdownChoices: doc.data().Choices,\n                  dropdownQuestion: doc.data().Question,\n                })\n                await this.trueFalseRef.get().then(async (doc) => {\n                  if (doc.exists) {\n                    this.truefalseData = doc.data()\n                    this.setState({\n                      trueFalseQuestion: doc.data().Question\n                    })\n                    await this.fillBlankRef.get().then(async (doc) => {\n                      if (doc.exists) {\n                        this.fillBlankData = doc.data()\n                        this.setState({\n                          fetched: true,\n                          fillBlankQuestion: doc.data().Question\n                        })\n                      }\n                    }).catch(function(error){\n                      console.log(\"Error getting document:\", error)\n                    })\n                  }\n                }).catch(function(error) {\n                  console.log(\"Error getting document:\", error)\n                })\n              }\n            }).catch(function(error) {\n              console.log(\"Error getting document:\", error);\n            });\n          }\n        }).catch(function(error) {\n          console.log(\"Error getting document:\", error)\n        })\n      }\n    }).catch(function(error) {\n        console.log(\"Error getting document:\", error);\n    }); \n    console.log(this.state.fetched)\n  }\n  \n  handleDropdownSelect(i, e) {\n    this.setState({\n      dropdownText: e,\n      dropdownState: i\n    })\n  }\n\n  handleTrueFalseSelect(e) {\n    this.setState({\n      trueFalseText: e,\n    })\n  }\n\n  handleFillBlank(e){\n    if (!(e.target.value.match(/^[A-Za-z]+$/)) && \n    (e.target.value != '')){\n      this.setState({\n        fillBlankError: true,\n        fillBlankAnswerState: 'Your answer should only include letters (a-z, A-Z).'\n      })\n    } else{\n      this.setState({\n        fillBlankError: false,\n        fillBlankAnswerState: null,\n        fillBlankText: e.target.value\n      })\n    }\n  }\n\n  handleMultChoiceSelect(i, q, e){\n    console.log(i)\n    if (q === 1){\n      this.setState({\n        multChoiceState1: i\n      })\n    }\n    if (q === 2){\n      this.setState({\n        multChoiceState2: i\n      })\n    }\n  }\n  async handleSubmit() {\n    if (this.state.multChoiceState1 === null \n      || this.state.multChoiceState2 === null\n      || this.state.dropdownState === null\n      || this.state.trueFalseText === 'True/False'\n      || this.state.fillBlankText === ''\n      || this.state.fillBlankError) {\n        this.setState({\n          submissionState: 'Please attempt all questions and fix any errors.'\n        })\n    } else{\n      this.setState({\n        multChoiceCorrect1: (this.state.multChoiceState1 === await this.multData.Answer ? 1 : 0)\n      }, async () => {\n        this.setState({\n          multChoiceCorrect2: (this.state.multChoiceState2 === await this.multData2.Answer ? 1 : 0)\n        }, async () => {\n          this.setState({\n            dropdownCorrect: (this.state.dropdownState === await this.dropdownData.Answer ? 1: 0)\n          }, async () => {\n            this.setState({\n              trueFalseCorrect: (Boolean(this.state.trueFalseText.toLowerCase()) === await this.truefalseData.Answer ? 1: 0),\n            }, async() => {\n              this.setState({\n                fillBlankCorrect: (this.state.fillBlankText.toLowerCase() === await this.fillBlankData.Answer ? 1 : 0),\n                submissionState: 'Processing your submission...', \n                submitted: true\n              })\n            })\n          })\n        })\n      })\n    }\n    \n}\n  async handleTake() {\n    this.multRef = this.db.collection(\"MultipleChoice\").doc(\"\" + Math.floor((Math.random() * 10)));\n    this.multRef2 = this.db.collection(\"MultipleChoice\").doc(\"\" + Math.floor((Math.random() * 10)));\n    while (this.multRef === this.multRef2){\n      this.multRef2 = this.db.collection(\"MultipleChoice\").doc(\"\" + Math.floor((Math.random() * 10)));\n    }\n    this.dropdownRef = this.db.collection(\"DropDown\").doc(\"\" + Math.floor((Math.random() * 10)))\n    this.trueFalseRef = this.db.collection(\"TrueFalse\").doc(\"\" + Math.floor((Math.random() * 10)))\n    this.fillBlankRef = this.db.collection(\"FillInTheBlank\").doc(\"\" + Math.floor(Math.random() * 10))\n    this.getData()\n    if (this.state.fetched === true){\n      this.setState({\n        multChoiceState1: null,\n        multChoiceCorrect1: 0,\n        multChoiceState2: null,\n        multChoiceCorrect2: 0,\n        dropdownText: 'Choose',\n        dropdownState: null,\n        dropdownCorrect: 0,\n        fillBlankCorrect: 0,\n        fillBlankText: '',\n        trueFalseText: 'True/False',\n        trueFalseCorrect: 0,\n        submissionState: null,\n        submitted: false,\n        fillBlankError: false,\n        fillBlankAnswerState: null\n        \n      })\n    }\n  }\n\n  render() {\n    if (this.state.fetched === true){\n      if (this.state.submitted === false){\n        return (\n          <div className=\"App\">\n            <header>\n              <Jumbotron className = \"jumbo\">\n                <h1>Trivia Time!</h1>\n                <h4>Test your knowledge about FBLA!</h4>\n              </Jumbotron>\n              {/* <InfoButton/> */}\n            </header>\n            <div className = \"question dropdown\">\n              <h5>1. {this.state.dropdownQuestion}</h5>\n              <DropdownQuestion onSelect = {this.handleDropdownSelect} value = {this.state.dropdownText}\n                answerChoices = {this.state.dropdownChoices} disabled = 'false'\n              />\n            </div>\n            <div id = \"fill-blank\" className = \"question\">\n              <h5>2. {this.state.fillBlankQuestion}</h5>\n              <FillInBlank onChange = {this.handleFillBlank} disabled = 'false'/>\n              <div className = 'fillBlankError'>\n                <h6>{this.state.fillBlankAnswerState}</h6>\n              </div>\n            </div>\n            <div id = \"mult-choice\" className = \"question\">\n              <h5>3. {this.state.multQuestion1}</h5>\n              <MultChoice onSelect = {(i, q) => this.handleMultChoiceSelect(i, q)} disabled = 'false' \n              answerChoices = {this.state.multChoices1} question = '1'/>\n            </div>\n            <div id = \"mult-choice\" className = \"question\">\n              <h5>4. {this.state.multQuestion2}</h5>\n              <MultChoice onSelect = {(i, q) => this.handleMultChoiceSelect(i, q)} disabled = 'false' \n              answerChoices = {this.state.multChoices2} question = '2'/>\n            </div>\n            <div className = \"question dropdown\">\n              <h5>5. {this.state.trueFalseQuestion}</h5>\n              <TrueFalse onSelect = {this.handleTrueFalseSelect} value = {this.state.trueFalseText}\n                disabled = 'false'\n              />\n            </div>\n            <div className = 'submissionError'>\n              <h5>{this.state.submissionState}</h5>\n            </div>\n            <div className = \"submit\">\n              <Button variant = \"success\" type = \"submit\" onClick = {this.handleSubmit}>Submit Answers</Button>\n            </div>\n          </div>\n        );\n      } else {\n        return(\n          <div className = \"App\">\n            <Jumbotron className = 'jumbo App'>\n              <h1>Results</h1>\n            </Jumbotron>\n            <div className = 'question dropdown'>\n              <h5><strong>{this.state.dropdownCorrect === 1 ? \"Correct Answer (1/1)\" : \"Incorrect Answer (0/1)\"}</strong></h5>\n              <h6>1. {this.state.dropdownQuestion}</h6>\n              <DropdownQuestion answerChoices = {this.state.dropdownChoices} disabled = 'true'\n              selected = {this.state.dropdownState} answer = {this.dropdownData.Answer}/>\n            </div>\n            <div className = 'question fill-blank'>\n              <h5><strong>{this.state.fillBlankCorrect === 1 ? \"Correct Answer (1/1)\" : \"Incorrect Answer (0/1)\"}</strong></h5>\n              <h6>2. {this.state.fillBlankQuestion}</h6>\n              <FillInBlank disabled = 'true' text = {this.state.fillBlankText} correct = {this.state.fillBlankCorrect}\n                answer = {this.fillBlankData.Answer}\n              />\n            </div>\n            <div className = 'question mult-choice'>\n              <h5><strong>{this.state.multChoiceCorrect1 === 1 ? \"Correct Answer (1/1)\" : \"Incorrect Answer (0/1)\"}</strong> </h5>\n              <h6>3. {this.state.multQuestion1} </h6>\n              <MultChoice answerChoices = {this.state.multChoices1} disabled = 'true' \n              selected = {this.state.multChoiceState1}  answer = {this.multData.Answer}\n              />\n            </div>\n            <div className = 'question mult-choice'>\n              <h5><strong>{this.state.multChoiceCorrect2 === 1 ? \"Correct Answer (1/1)\" : \"Incorrect Answer (0/1)\"}</strong> </h5>\n              <h6>4. {this.state.multQuestion2} </h6>\n              <MultChoice answerChoices = {this.state.multChoices2} disabled = 'true' \n              selected = {this.state.multChoiceState2}  answer = {this.multData2.Answer}/>\n            </div>  \n            <div className = 'question trueFalse'>\n              <h5><strong>{this.state.trueFalseCorrect === 1 ? \"Correct Answer (1/1)\" : \"Incorrect Answer (0/1)\"}</strong></h5>\n              <h6>5. {this.state.trueFalseQuestion}</h6>\n              <TrueFalse disabled = 'true' answer = {this.truefalseData.Answer}/>\n            </div>\n            <br></br>\n            <div className = \"retake\">\n            <Button variant = \"secondary\" onClick = {this.handleTake}>Take Another Quiz</Button>\n            </div>\n          </div>\n        )\n      }\n    } else {\n      return (\n        <div>\n          <h1>Loading...</h1>\n          <Spinner animation=\"border\" variant=\"dark\" />\n        </div>\n      );\n    }\n  }\n}\n\nexport default App;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/InfoDisplay.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/Dropdown/Dropdown.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/FillTheBlank/FillTheBlank.js",[],["46","47"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/MultChoice/MultChoice.js",["48","49","50"],"import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport './MultChoice.css'\nimport xmark from \"../../../assets/x.svg\";\nimport checkmark from \"../../../assets/check.svg\";\n\n\nconst MultChoice = (props) => {\n    let components = []\n    for (let i = 0; i < 4; i++) {\n        if (props.disabled === 'true'){\n            if (i === props.selected) {\n                if (props.selected === props.answer){\n                    components.push(\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios` + (i+1)}\n                        label={<div><strong>{props.answerChoices[i]} (CORRECT SELECTED)</strong> \n                        <img src = {checkmark}/></div>}\n                        name=\"formHorizontalRadios\"\n                        disabled = {true}\n                        className = 'correct'\n                        />\n                    ) \n                } else {\n                    components.push(\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios` + (i+1)}\n                        label={<div><strong>{props.answerChoices[i]} (INCORRECT SELECTED)</strong>\n                        <img src = {xmark}/></div>}\n                        name=\"formHorizontalRadios\"\n                        disabled = {true}\n                        className = 'wrong'\n                        />\n                    )\n                }\n            }else if (i === props.answer) {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={<div><strong>{props.answerChoices[i]} (CORRECT ANSWER)</strong>\n                    <img src = {checkmark}/></div>}\n                    name=\"formHorizontalRadios\"\n                    disabled = {true}\n                    className = 'correct'\n                    />\n                )\n            }else {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    disabled = {true}\n                    />\n                )\n            }\n        } else {\n            if (props.question === '1'){\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    onChange = {(e) => props.onSelect(i, 1, e)}\n                    />\n                )\n            }\n            else {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    onChange = {(e) => props.onSelect(i, 2, e)}\n                    />\n                )\n            }\n            \n        }\n    }\n    return (\n        <Form>\n        <Form.Group className = \"radios\">\n            {components}\n        </Form.Group>\n        </Form>\n        \n    )\n}\n\nexport default MultChoice;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/TrueFalse/TrueFalse.js",["51","52"],"import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\"\nimport Button from \"react-bootstrap/Button\"\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\nimport \"./TrueFalse.css\"\nimport checkmark from \"../../../assets/check.svg\"\nimport xmark from \"../../../assets/x.svg\"\nclass TrueFalse extends React.Component {\n    render() {\n        if (this.props.disabled === 'false'){\n            return (\n                <Dropdown id=\"dropdown-button\" as={ButtonGroup} onSelect = {this.props.onSelect}>\n                    <Button variant=\"secondary\">{this.props.value}</Button>\n    \n                    <Dropdown.Toggle split variant=\"secondary\" id=\"dropdown-split-basic\" />\n    \n                    <Dropdown.Menu>\n                        <Dropdown.Item eventKey=\"True\">True</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"False\">False</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            )\n        } else{\n            return(\n                <div className = 'TF-result'>\n                    <Button disabled \n                    className = {this.props.answer ? 'correctTF' : 'incorrectTF'}>\n                    True <img src = {this.props.answer ? checkmark : xmark}/></Button>\n                    <Button disabled \n                    className = {this.props.answer ? 'incorrectTF' : 'correctTF'}>\n                    False <img src = {this.props.answer ? xmark : checkmark}/></Button>\n                </div>\n            )\n        }\n    }\n}\n\nexport default TrueFalse;",{"ruleId":"53","replacedBy":"54"},{"ruleId":"55","replacedBy":"56"},{"ruleId":"53","replacedBy":"57"},{"ruleId":"55","replacedBy":"58"},{"ruleId":"59","severity":1,"message":"60","line":8,"column":8,"nodeType":"61","messageId":"62","endLine":8,"endColumn":18},{"ruleId":"63","severity":1,"message":"64","line":139,"column":21,"nodeType":"65","messageId":"66","endLine":139,"endColumn":23},{"ruleId":"53","replacedBy":"67"},{"ruleId":"55","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":19,"column":25,"nodeType":"71","endLine":19,"endColumn":49},{"ruleId":"69","severity":1,"message":"70","line":31,"column":25,"nodeType":"71","endLine":31,"endColumn":45},{"ruleId":"69","severity":1,"message":"70","line":44,"column":21,"nodeType":"71","endLine":44,"endColumn":45},{"ruleId":"69","severity":1,"message":"70","line":28,"column":26,"nodeType":"71","endLine":28,"endColumn":78},{"ruleId":"69","severity":1,"message":"70","line":31,"column":27,"nodeType":"71","endLine":31,"endColumn":79},"no-native-reassign",["72"],"no-negated-in-lhs",["73"],["72"],["73"],"no-unused-vars","'InfoButton' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected",["72"],["73"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]