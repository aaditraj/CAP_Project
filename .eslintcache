[{"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js":"1","/Users/araj/Desktop/Coding/cap/cap_project/src/reportWebVitals.js":"2","/Users/araj/Desktop/Coding/cap/cap_project/src/App.js":"3","/Users/araj/Desktop/Coding/cap/cap_project/src/components/InfoDisplay.js":"4","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/Dropdown/Dropdown.js":"5","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/FillTheBlank/FillTheBlank.js":"6","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/MultChoice/MultChoice.js":"7","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/TrueFalse/TrueFalse.js":"8","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Report/GeneratePDF.js":"9","/Users/araj/Desktop/Coding/cap/cap_project/src/components/DataFetching/GetData.js":"10","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Login/Login.js":"11"},{"size":839,"mtime":1612897663857,"results":"12","hashOfConfig":"13"},{"size":362,"mtime":1609036986229,"results":"14","hashOfConfig":"13"},{"size":20500,"mtime":1613535978784,"results":"15","hashOfConfig":"13"},{"size":814,"mtime":1611284022809,"results":"16","hashOfConfig":"13"},{"size":3826,"mtime":1613278453839,"results":"17","hashOfConfig":"13"},{"size":2665,"mtime":1613278415020,"results":"18","hashOfConfig":"13"},{"size":3629,"mtime":1613279422131,"results":"19","hashOfConfig":"13"},{"size":1560,"mtime":1613278668045,"results":"20","hashOfConfig":"13"},{"size":960,"mtime":1613505770049,"results":"21","hashOfConfig":"13"},{"size":3214,"mtime":1612900116642,"results":"22","hashOfConfig":"13"},{"size":4055,"mtime":1613531689712,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1d1tjwl",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"44","usedDeprecatedRules":"26"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"/Users/araj/Desktop/Coding/cap/cap_project/src/index.js",[],["51","52"],"/Users/araj/Desktop/Coding/cap/cap_project/src/reportWebVitals.js",[],["53","54"],"/Users/araj/Desktop/Coding/cap/cap_project/src/App.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/InfoDisplay.js",[],["55","56"],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/Dropdown/Dropdown.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/FillTheBlank/FillTheBlank.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/MultChoice/MultChoice.js",["57","58"],"import React from \"react\";\nimport Form from \"react-bootstrap/Form\";\nimport './MultChoice.css'\nimport xmark from \"../../../assets/x.svg\";\nimport checkmark from \"../../../assets/check.svg\";\nimport { useState } from \"react\";\n\nconst MultChoice = (props) => {\n    const [state, setState] = useState('Hello')\n    let components = []\n    for (let i = 0; i < 4; i++) {\n        if (props.disabled === 'true'){\n            if (i === props.selected) {\n                if (props.selected === props.answer){\n                    components.push(\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios` + (i+1)}\n                        label={<div><strong>{props.answerChoices[i]}</strong> \n                        <img src = {checkmark} alt = \"checkmark\"/></div>}\n                        name=\"formHorizontalRadios\"\n                        disabled = {true}\n                        className = 'correct selected'\n                        />\n                    ) \n                } else {\n                    components.push(\n                        <Form.Check \n                        type=\"radio\"\n                        key={`formHorizontalRadios` + (i+1)}\n                        label={<div><strong>{props.answerChoices[i]}</strong>\n                        <img src = {xmark} alt = \"xmark\"/></div>}\n                        name=\"formHorizontalRadios\"\n                        disabled = {true}\n                        className = 'wrong selected'\n                        />\n                    )\n                }\n            }else if (i === props.answer) {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={<div><strong>{props.answerChoices[i]}</strong>\n                    <img src = {checkmark} alt = \"checkmark\"/></div>}\n                    name=\"formHorizontalRadios\"\n                    disabled = {true}\n                    className = 'correct'\n                    />\n                )\n            }else {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    disabled = {true}\n                    />\n                )\n            }\n        } else {\n            if (props.question === '1'){\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    onChange = {(e) => props.onSelect(i, 1, e)}\n                    />\n                )\n            }\n            else {\n                components.push(\n                    <Form.Check \n                    type=\"radio\"\n                    key={`formHorizontalRadios` + (i+1)}\n                    label={props.answerChoices[i]}\n                    name=\"formHorizontalRadios\"\n                    onChange = {(e) => props.onSelect(i, 2, e)}\n                    />\n                )\n            }\n            \n        }\n    }\n    return (\n        <Form>\n        <Form.Group className = \"radios\">\n            <div className = \"radios-wrapper\">\n                <div className = \"align-wrapper\">\n                {components}\n                </div>\n            </div>\n        </Form.Group>\n        </Form>\n        \n    )\n}\n\nexport default MultChoice;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Questions/TrueFalse/TrueFalse.js",["59","60"],"import React from \"react\";\nimport Dropdown from \"react-bootstrap/Dropdown\"\nimport Button from \"react-bootstrap/Button\"\nimport ButtonGroup from \"react-bootstrap/ButtonGroup\"\nimport \"./TrueFalse.css\"\nimport checkmark from \"../../../assets/check.svg\"\nimport xmark from \"../../../assets/x.svg\"\nclass TrueFalse extends React.Component {\n    render() {\n        if (this.props.disabled === 'false'){\n            return (\n                <Dropdown id=\"dropdown-button\" as={ButtonGroup} onSelect = {this.props.onSelect}>\n                    <Button variant=\"secondary\">{this.props.value}</Button>\n    \n                    <Dropdown.Toggle split variant=\"secondary\" id=\"dropdown-split-basic\" />\n    \n                    <Dropdown.Menu>\n                        <Dropdown.Item eventKey=\"True\">True</Dropdown.Item>\n                        <Dropdown.Item eventKey=\"False\">False</Dropdown.Item>\n                    </Dropdown.Menu>\n                </Dropdown>\n            )\n        } else{\n            return(\n                <div className = 'TF-result'>\n                    <Button disabled \n                    className = {this.props.answer ? 'correctTF' : 'incorrectTF'}>\n                    True <img src = {this.props.answer ? checkmark : xmark}/></Button>\n                    <Button disabled \n                    className = {this.props.answer ? 'incorrectTF' : 'correctTF'}>\n                    False <img src = {this.props.answer ? xmark : checkmark}\n                    /></Button>\n                </div>\n            )\n        }\n    }\n}\n\nexport default TrueFalse;","/Users/araj/Desktop/Coding/cap/cap_project/src/components/Report/GeneratePDF.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/DataFetching/GetData.js",[],"/Users/araj/Desktop/Coding/cap/cap_project/src/components/Login/Login.js",[],{"ruleId":"61","replacedBy":"62"},{"ruleId":"63","replacedBy":"64"},{"ruleId":"61","replacedBy":"65"},{"ruleId":"63","replacedBy":"66"},{"ruleId":"61","replacedBy":"67"},{"ruleId":"63","replacedBy":"68"},{"ruleId":"69","severity":1,"message":"70","line":9,"column":12,"nodeType":"71","messageId":"72","endLine":9,"endColumn":17},{"ruleId":"69","severity":1,"message":"73","line":9,"column":19,"nodeType":"71","messageId":"72","endLine":9,"endColumn":27},{"ruleId":"74","severity":1,"message":"75","line":28,"column":26,"nodeType":"76","endLine":28,"endColumn":78},{"ruleId":"74","severity":1,"message":"75","line":31,"column":27,"nodeType":"76","endLine":32,"endColumn":23},"no-native-reassign",["77"],"no-negated-in-lhs",["78"],["77"],["78"],["77"],["78"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","'setState' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-global-assign","no-unsafe-negation"]